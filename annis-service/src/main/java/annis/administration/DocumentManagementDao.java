/*
 * Copyright 2016 SFB 632.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package annis.administration;

import org.corpus_tools.salt.common.SDocument;
import org.springframework.transaction.annotation.Transactional;

/**
 * A DAO to insert and delete documents to/from existing corpora in the database.
 * 
 * @author Thomas Krause <krauseto@hu-berlin.de>
 */
public class DocumentManagementDao extends AbstractAdminstrationDao
{
  /**
   * Deletes a document
   * @param toplevelCorpus
   * @param document 
   */
  @Transactional
  public void deleteDocument(String toplevelCorpus, String document)
  {
    // TODO: implement
  }
  
    /**
   * Appends a Salt document to an existing corpus.
   * @param toplevelCorpus The name of the toplevel corpus that this document should be appended to.
   * @param doc The document
   */
  @Transactional
  public void insertDocument(String toplevelCorpus, SDocument doc)
  {
    final ANNISFormatVersion version = ANNISFormatVersion.V3_3;
    
    // TODO: implement
    
//    createStagingAreaV33(temporaryStagingArea);
//    bulkImport(path, version);
//
//    String toplevelCorpusName = getTopLevelCorpusFromTmpArea();
//
//    applyConstraints();
//    createStagingAreaIndexes(version);
//
//    fixResolverVisMapTable(toplevelCorpusName, tableInStagingArea(
//      FILE_RESOLVER_VIS_MAP));
//    analyzeStagingTables();
//
//    addDocumentNameMetaData();
//
//    AdministrationDao.Offsets offsets = calculateOffsets();
//    long corpusID = getQueryDao().mapCorpusNameToId(toplevelCorpusName);
//    createNodeIdMapping();
//
//    importBinaryData(path, toplevelCorpusName);
//
//    extendStagingText(corpusID);
//    extendStagingExampleQueries(corpusID);
//
//    analyzeAutoGeneratedQueries(corpusID);
//
//    computeCorpusStatistics(path);
//
//    analyzeStagingTables();
//
//    insertCorpus(corpusID, offsets);
//
//    // TODO: re-calculate the pre/post order of the documents
//    computeCorpusPath(corpusID);
//
//    createAnnotations(corpusID);
//
//    createAnnoCategory(corpusID);
//
//    // create the new facts table partition
//    createFacts(corpusID, version, offsets);
//    
//    if(hackDistinctLeftRightToken)
//    {
//      adjustDistinctLeftRightToken(corpusID);
//    }
//    
//    if (temporaryStagingArea)
//    {
//      dropStagingArea();
//    }
//
//    // create empty corpus properties file
//    if (getQueryDao().getCorpusConfigurationSave(toplevelCorpusName) == null)
//    {
//      log.info("creating new corpus.properties file");
//      getQueryDao().setCorpusConfiguration(toplevelCorpusName, new Properties());
//    }
//
//    analyzeFacts(corpusID);
//    analyzeTextTable(toplevelCorpusName);
//    generateExampleQueries(corpusID);
//
//    if (aliasName != null && !aliasName.isEmpty())
//    {
//      addCorpusAlias(corpusID, aliasName);
//    }
//    return true; 
  }
}
