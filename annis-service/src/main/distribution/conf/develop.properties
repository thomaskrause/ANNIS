########################################################################
# INTERNAL variables, please do not change if you are not a developer! #
########################################################################


# SQL scripts
annis.script-path=${annis.home}/sql

# restrict precedence operator to a maximal distance
annis.precedence-restriction=50

annis.import.temporary-staging-area=true

# If true, use the user defined ^=^ operator which does have a very
# high selectivy 0.995 for joing the "right_token" columns in the "same span"
# AQL operator. Thus only the selectivity of the "left_column"/"right_column"
# join is used. Unfortunally its not possible to define a static selectivity
# for an operator and so we re-use the inbuild "nlikejoinsel" selectivity
# function. Currently (PostgreSQL 9.5) this function will always return
# 0.995. If PostgreSQL in the future actually has a proper implementation of 
# this function the hack must be de-activated.
annis.hack_operator_same_span=true

# If true adjust the left/right_token value to the average maximal left/right_token
# value per corpus/text on import to enhance the planner selectivity estimations.
annis.hack_distinct_left_right_token=true

# don't use BETWEEN SYMMETRIC, only use BETWEEN
annis.disable-between-symmetric-predicate=false

# don't use BETWEEN, use >= and <= comparison instead
annis.disable-between-predicate=false

# allow binding of same node to both operands of sibling operator
annis.allow-identical-sibling=false

# provide two-sided boundaries for left and right for inclusion operator
annis.optimize-inclusion=true

# optimize indirect precedence for index on (leftToken - 1) for PostgreSQL
annis.optimize-indirect-precedence=false

# where to attach component constraints for edge operators (lhs, rhs or both)
annis.component-predicates=rhs

# use dedicated is token column (or determine tokens using token_index)
annis.use-is-token-column=true

# restrict toplevel_corpus in EXISTS subquery for common ancestor operator
annis.use-toplevel-corpus-predicate-in-common-ancestor-subquery=true

# restrict component_ref in and outside EXISTS subquery for common ancestor operator
annis.use-component-ref-predicate-in-common-ancestor-subquery=true


# include document name (corpus.path_name[1]) in SELECT clause of ANNOTATE queries
annis.include-document-name-in-annotate-query=false

# the column name identifying a node
annis.node-id-column-name=id

# VR: from the port
annis.annotate.sort-solutions=true

